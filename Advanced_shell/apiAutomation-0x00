#!/usr/bin/env bash
# Advanced_shell / apiAutomation-0x00
# Fetch Pikachu from PokÃ©API -> data.json
# On failure, append a timestamped message (and any response body) to errors.txt

set -Eeuo pipefail

API_URL="https://pokeapi.co/api/v2/pokemon/pikachu"
OUT_FILE="data.json"
ERR_FILE="errors.txt"

timestamp() { date '+%Y-%m-%dT%H:%M:%S%z'; }

tmp="$(mktemp)"
trap 'rm -f "$tmp"' EXIT

# Make the request. We capture HTTP code to stdout; body -> $tmp; stderr -> curl.err
http_code="$(curl -sS -m 20 \
  -H 'User-Agent: ALX-AdvancedShell/1.0' \
  -w '%{http_code}' \
  -o "$tmp" \
  "$API_URL" 2>curl.err)" || {
  # If curl itself fails (network/DNS/timeout), log the stderr message.
  printf '[%s] Request failed: %s\n' "$(timestamp)" "$(cat curl.err)" >> "$ERR_FILE"
  rm -f curl.err
  exit 1
}
rm -f curl.err

# Handle non-200 responses
if [[ "$http_code" != "200" ]]; then
  printf '[%s] HTTP %s from %s\n' "$(timestamp)" "$http_code" "$API_URL" >> "$ERR_FILE"
  # include body (often contains error details)
  sed 's/^/  /' "$tmp" >> "$ERR_FILE"
  echo >> "$ERR_FILE"
  exit 1
fi

# Success: move the body to the final output
mv -f "$tmp" "$OUT_FILE"
trap - EXIT

echo "Saved response to $OUT_FILE"
